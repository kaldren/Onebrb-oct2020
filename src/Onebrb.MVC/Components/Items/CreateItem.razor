@using Onebrb.MVC.Models.Item
@using System.Net.Http
@using Newtonsoft.Json
@using System.Text
@using System.Security.Claims
@using System.Net.Http.Headers
@using Onebrb.MVC.Constants 
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<p>Publish new item</p>
<p class="@notifyBarClass">@OnSubmitResult</p>

<EditForm Model="@Item" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="itemTitle">
            Title
        </label>
        <InputText @bind-Value="Item.Title" id="itemTitle" class="form-control" />
    </div>

    <div class="form-group">
        <label for="itemCategories">
            Category
        </label>

        <InputSelect @bind-Value="SelectedCategoryId" id="itemCategories" class="form-control">
            @foreach (var category in Model.Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="itemDescription">
            Description:
        </label>
        <InputTextArea @bind-Value="Item.Description" id="itemDescription" class="form-control" />
    </div>


    <div class="form-group">
        <label for="itemPrice">
            Price
        </label>
        <InputNumber @bind-Value="Item.Price" id="itemPrice" class="form-control" />
    </div>

    <button type="submit" class="@BtnSubmitCss">@PublishBtnText</button>
</EditForm>
@{
}


@code {
    [Parameter]
    public CreateItemViewModel Model { get; set; }

    [Parameter]
    public string CurrentUserId { get; set; }

    CreateItemRequestModel Item = new CreateItemRequestModel();
    public string SelectedCategoryId { get; set; }

    // Form
    public bool IsFormEnabled { get; set; } = true;

    // Misc
    public string OnSubmitResult { get; set; }
    public string notifyBarClass { get; set; }
    public string OnebrbApiToken { get; set; }

    // Button
    public string PublishBtnText { get; set; } = "Publish";
    public string BtnSubmitCss { get; set; } = $"{BootstrapCssConst.Btn} {BootstrapCssConst.BtnSuccess}";

    private async Task HandleValidSubmit()
    {
        if (!IsFormEnabled)
        {
            return;
        }

        IsFormEnabled = false;

        notifyBarClass = BootstrapCssConst.AlertInfo;
        OnSubmitResult = $"Please wait...";
        PublishBtnText = "Publishing...";
        BtnSubmitCss = $"{BootstrapCssConst.Btn} {BootstrapCssConst.BtnSuccess} {BootstrapCssConst.Disabled}";

        try
        {
            Item.CategoryId = int.Parse(SelectedCategoryId);
            Item.UserId = CurrentUserId;

            var json = JsonConvert.SerializeObject(Item);
            var data = new StringContent(json, Encoding.UTF8, "application/json");

            Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", OnebrbApiToken);

            var response = await Http.PostAsync($"https://localhost:44307/api/Items/Create", data);

            string result = response.Content.ReadAsStringAsync().Result;
            IsFormEnabled = false;
            notifyBarClass = BootstrapCssConst.AlertSuccess;
            //OnSubmitResult = $"The item was published successfuly!";
            // {"id":59,"title":"asddadas","description":"asddsadsa","price":5.0,"categoryId":1,"userId":"8a3bc02b-b72d-4810-a6b7-9d82aa42ffde","user":null}
            OnSubmitResult = result;
            PublishBtnText = "Published";
        }
        catch (Exception)
        {
            notifyBarClass = $"{BootstrapCssConst.AlertDanger}";
            OnSubmitResult = "Couldn't publish the item, please try again later...";
            PublishBtnText = "Publish";
            BtnSubmitCss = $"{BootstrapCssConst.Btn} {BootstrapCssConst.BtnSuccess}";
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        SelectedCategoryId = Model.Categories.First().Id.ToString();
        OnebrbApiToken = await localStorage.GetItemAsync<string>("OnebrbApiToken");

        if (string.IsNullOrWhiteSpace(OnebrbApiToken))
        {
            try
            {
                var response = await Http.GetAsync($"https://localhost:44308/api/token");

                string result = response.Content.ReadAsStringAsync().Result;
                OnSubmitResult = result;
                await localStorage.SetItemAsync("OnebrbApiToken", result);

                OnebrbApiToken = await localStorage.GetItemAsync<string>("OnebrbApiToken");
            }
            catch (Exception)
            {
                OnSubmitResult = "Couldn't publish the item, please try again later...";
            }
        }
    }
}
